{
  "message": "SUCCESS",
  "result": [
    {
      "id": 1,
      "targetDevice": "PC",
      "deployUrl": "https://syon013.github.io/connection",
      "projectName": "connection",
      "projectImage": [
        {
          "src": "/solid/images/portfolio/connection/1.png",
          "alt": "커넥션 메인 화면 스크린샷"
        },
        {
          "src": "/solid/images/portfolio/connection/2.png",
          "alt": "커넥션 목록 화면 스크린샷"
        },
        {
          "src": "/solid/images/portfolio/connection/3.png",
          "alt": "커넥션 상세 화면 스크린샷"
        }
      ],
      "description": "위치 기반 서비스를 이용한 지역 경제 살리기 ",
      "techStacks": ["React", "styled-components", "Redux", "CRA"],
      "mainTask": [
        "로그인(일반, 카카오 소셜)/회원가입 기능 구현",
        "Item Sorting 기능 구현",
        "장바구니 기능 구현",
        "우편번호 검색 기능 구현",
        "Portal 기능을 이용하여 모달팝업 기능 구현"
      ],
      "workDetail": [
        {
          "id": 1,
          "title": "로그인/회원가입",
          "description": [
            {
              "id": 1,
              "subTitle": "일반 로그인/회원가입 기능을 구현하였습니다.",
              "content": [
                {
                  "id": 1,
                  "text": "일반 로그인의 경우 회원가입 시 Email을 이용해 회원가입을 해야하기 때문에 사용자가 Email 형식에 맞게 입력할 수 있도록 이메일 정규 표현식을, 비밀번호의 경우에는 비밀번호 형식에 맞게 입력할 수 있도록 정규 표현식을 사용하였습니다. 만약 정규표현식대로 입력을 하지 않으면 에러 메시지를 표시하고 버튼이 비활성화 되도록 구현하였습니다."
                },
                {
                  "id": 2,
                  "text": "회원가입 또는 로그인 시 발생할 수 있는 에러에 관하여 status code에 따라 에러 메세지를 띄우도록 구현하였습니다."
                }
              ]
            },
            {
              "id": 2,
              "subTitle": "카카오 소셜 로그인/회원가입 기능을 구현하였습니다.",
              "content": [
                {
                  "id": 1,
                  "text": "카카오 소셜 로그인은 .env 파일을 만들어 보안이 필요한 API Key 값이 타인에게 노출되지 않도록 하였습니다."
                },
                {
                  "id": 2,
                  "text": "searchParams를 이용하여 카카오의 형식에 맞춰 들어온 code를 추출하고, BackEnd에게 해당 코드를 쿼리스트링으로 보내어 사용자가 카카오로 로그인할 수 있도록 구현하였습니다."
                },
                {
                  "id": 3,
                  "text": "카카오 소셜 로그인 시에는 회원가입이 필요한지 여부를 확인하여 회원가입이 필요하다면 회원가입 페이지로 이동하도록 구현하였습니다."
                },
                {
                  "id": 4,
                  "text": "일반 또는 카카오 소셜 로그인 시 사용자의 Access token은 Local Storage에 저장하여 로그인 여부를 판단할 수 있도록 하였습니다."
                }
              ]
            }
          ]
        },
        {
          "id": 2,
          "title": "Item Sorting",
          "description": [
            {
              "id": 1,
              "subTitle": "아이템 정렬 기능을 구현하였습니다.",
              "content": [
                {
                  "id": 1,
                  "text": "아이템 정렬 기능은 가격순, 인기순, 최신순으로 정렬할 수 있도록 구현하였습니다."
                }
              ]
            }
          ]
        },
        {
          "id": 3,
          "title": "장바구니",
          "description": [
            {
              "id": 1,
              "subTitle": "장바구니 기능을 구현하였습니다.",
              "content": [
                {
                  "id": 1,
                  "text": "메인 또는 디테일 페이지에서 담은 상품이 장바구니에 들어오면 전체/마켓/개별 순으로 나뉜 데이터를 표시하고, 체크박스로 해당 상품을 선택/취소/삭제 할 수 있도록 구현 하였습니다."
                },
                {
                  "id": 2,
                  "text": "체크박스에서 선택한 아이템의 가격과 할인 내역을 우측에 있는 영수증 UI에 표시되도록 구현하였습니다."
                },
                {
                  "id": 3,
                  "text": "장바구니 안에 있는 상품의 데이터 수량을 변경시킬 때는 BackEnd에게 데이터를 보내 DB자체에서 수정된 수량이 저장되도록 하였습니다."
                }
              ]
            }
          ]
        },
        {
          "id": 4,
          "title": "우편번호 검색",
          "description": [
            {
              "id": 1,
              "subTitle": "우편번호 검색 기능을 구현하였습니다.",
              "content": [
                {
                  "id": 1,
                  "text": "우편번호 검색은 다음 주소 API를 이용하여 구현하였습니다."
                },
                {
                  "id": 2,
                  "text": "우편번호 검색 시에는 검색어를 입력하고 검색 버튼을 누르면 검색어에 맞는 주소를 표시하고, 추출된 데이터를 Input에 표시가 되도록 구현하였습니다."
                }
              ]
            }
          ]
        },
        {
          "id": 5,
          "title": "Portal",
          "description": [
            {
              "id": 1,
              "subTitle": "Portal 기능을 이용하여 모달팝업 기능을 구현하였습니다.",
              "content": [
                {
                  "id": 1,
                  "text": "Portal을 이용하여 root와 같은 최상위에서 Modal이 Open될 수 있도록하여 모달팝업을 구현할 때 사용하였습니다."
                }
              ]
            }
          ]
        }
      ],
      "repoUrl": "https://github.com/syon013/connection"
    },
    {
      "id": 2,
      "targetDevice": "responsive",
      "deployUrl": "https://syon013.github.io/goobne",
      "projectName": "goobne",
      "projectImage": [
        {
          "src": "/solid/images/portfolio/goobne/1.png",
          "alt": "굽네치킨 메인 화면 스크린샷"
        },
        {
          "src": "/solid/images/portfolio/goobne/2.png",
          "alt": "굽네치킨 목록 화면 스크린샷"
        },
        {
          "src": "/solid/images/portfolio/goobne/3.png",
          "alt": "굽네치킨 상세 화면 스크린샷"
        }
      ],
      "description": "굽네치킨 클론 코딩",
      "techStacks": [
        "React",
        "styled-components",
        "JavaScript",
        "Redux-Toolkit",
        "Vite",
        "Axios"
      ],
      "mainTask": [
        "Redux Toolkit를 사용하여 전역 상태 관리",
        "Axios 모듈화",
        "SelectBox & Badge & DropDown 등 컴포넌트 개발",
        "메인 페이지 및 상세페이지 로직 개발",
        "장바구니 로직 개발",
        "media query 모듈화를 이용하여 반응형 웹 구현"
      ],
      "workDetail": [
        {
          "id": 1,
          "title": "메인 페이지",
          "description": [
            {
              "id": 1,
              "subTitle": "메인 페이지에 대한 UI및 기능을 구현 하였습니다.",
              "content": [
                {
                  "id": 1,
                  "text": "Swiper.js 라이브러리를 이용하여 각각 상황에 맞는 UI가 화면에 그려질 수 있도록 구현하였습니다."
                },
                {
                  "id": 2,
                  "text": "처음 화면에 들어왔을 때, 이벤트 모달 처럼 보일 수 있도록 useEffect와 Portal을 이용하여 구현하였습니다."
                },
                {
                  "id": 3,
                  "text": "Media Query 모듈화를 이용하여 반응형 웹을 구현하였습니다."
                }
              ]
            }
          ]
        },
        {
          "id": 2,
          "title": "상세페이지",
          "description": [
            {
              "id": 1,
              "subTitle": "상세페이지의 UI와 기능을 구현 하였습니다.",
              "content": [
                {
                  "id": 1,
                  "text": "LIST 페이지에서 상품을 클릭했을 때 해당 상품에 대한 정보가 나열되어있는 상세페이지를 구현하였습니다."
                },
                {
                  "id": 2,
                  "text": "DropDown 컴포넌트 개발을 통해 원산지 정보 및 영양성분의 정보를 볼 수 있도록 구현하였으며, useRef를 이용하여 외부 클릭 시 DropDown이 닫히도록 구현하였습니다."
                },
                {
                  "id": 3,
                  "text": "상품 중 같은 이름이지만 부가적인 정보가 바뀔 때 해당 데이터도 같이 바뀌도록 구현하였습니다."
                },
                {
                  "id": 4,
                  "text": "Counter 컴포넌트를 개발하여 해당 상품에 대한 수령을 증가시키거나 감소시킬 수 있도록하고, 상품의 수량이 변경될 때마다 UI상으로도 변경되도록 구현하였습니다."
                }
              ]
            }
          ]
        },
        {
          "id": 3,
          "title": "장바구니 페이지",
          "description": [
            {
              "id": 1,
              "subTitle": "장바구니 페이지의 기능을 개발 하였습니다.",
              "content": [
                {
                  "id": 1,
                  "text": "Redux-Toolkit을 이용하여 전역 상태 관리를 하였으며, 상품에 대한 추가/삭제/수량 변경을 할 수 있도록 구현하였습니다. 같은 상품을 장바구니에 추가할 경우에는 수량만 증가하도록 구현하였습니다."
                },
                {
                  "id": 2,
                  "text": "메뉴 추가하기 버튼을 누르면 List 페이지로 이동하여 사용자가 다른 상품을 담을 수 있도록 구현하였습니다."
                }
              ]
            }
          ]
        }
      ],
      "repoUrl": "https://github.com/syon013/goobne"
    }
  ]
}
